# frozen_string_literal: true

##
# Performs a check on a given scrobbler. Each batch generated by the scrobbler are processed individually in series, at
# first. If any batch fails to execute, then it will be retried in its own individual job. Unexpected errors raised at
# any point during this process will cause this job to exit and retry prematurely, which may potentially lead to
# unexpected behavior.
#
class ScrobblerCheckJob < ApplicationJob
  queue_as :fetch

  attr_accessor :processor, :scrobbler

  # @param scrobbler [Scrobbler] the scrobbler whose check is to be performed
  # @param check [String] the name of the check to perform (@see Schedulable::CHECKS)
  # @param processor [#call] the processor being used to process the resulting batch of scrobbles
  def perform(scrobbler, check, processor: ProcessScrobbleBatch)
    self.processor = processor
    self.scrobbler = scrobbler

    return if scrobbler.service_issues?

    scrobbler.run_check(check) { |batch| process_batch(batch) }
  end

  private

  def process_batch(batch)
    result = processor.(batch)

    ScrobblerFetchJob.perform_later(scrobbler, batch.start_time.to_i, batch.end_time.to_i) unless result.success?
  end
end
